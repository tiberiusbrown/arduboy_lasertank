import vars;

u16 undo_compress_buffer(u8[256]& src, u16 ci)
{
    u8 i = 0;
    do
    {
        u8 t = src[i];
        u8 n;
        while(true)
        {
            if(n >= 3 || i+n >= 255 || src[i+n+1] != T_DIRT)
                break;
            n += 1;
        }
        undo_base[ci] = t + n;
        ci += 1;
        i += n + 1;
    } while(i != 0);
    return ci;
}

u16 undo_decompress_buffer(u8[256]& dst, u16 ci)
{
    u8 i = 0;
    do
    {
        u8 t = undo_base[ci];
        u8 n = t & 3;
        dst[i] = t & 0xfc;
        for(u8 k = 1; k <= n; ++k)
            dst[i+k] = T_DIRT;
        ci += 1;
        i += n + 1;
    } while(i != 0);
    return ci;
}

void undo_compress()
{
    $memset(undo_base, 0xaa);

    // each entry represents one tile/object
    // bits 1:0 are how many bytes of dirt follow

    undo_base[0] = tanky * 16 + tankx;
    undo_base[1] = tankdir;

    undo_base[2+0] = (moves >> (0 * 8));
    undo_base[2+1] = (moves >> (1 * 8));
    undo_base[2+2] = (moves >> (2 * 8));
    undo_base[2+3] = (moves >> (3 * 8));
    undo_base[6+0] = (shots >> (0 * 8));
    undo_base[6+1] = (shots >> (1 * 8));
    undo_base[6+2] = (shots >> (2 * 8));
    undo_base[6+3] = (shots >> (3 * 8));

    u16 ci = 10;
    ci = undo_compress_buffer(tiles, ci);
    ci = undo_compress_buffer(objects, ci);
}

void undo_decompress()
{
    tanky = undo_base[0] >> 4;
    tankx = undo_base[0] & 15;

    moves  = u32(undo_base[2+0]) << (0 * 8);
    moves += u32(undo_base[2+1]) << (1 * 8);
    moves += u32(undo_base[2+2]) << (2 * 8);
    moves += u32(undo_base[2+3]) << (3 * 8);
    shots  = u32(undo_base[6+0]) << (0 * 8);
    shots += u32(undo_base[6+1]) << (1 * 8);
    shots += u32(undo_base[6+2]) << (2 * 8);
    shots += u32(undo_base[6+3]) << (3 * 8);

    u16 ci = 10;
    ci = undo_decompress_buffer(tiles, ci);
    ci = undo_decompress_buffer(objects, ci);
}

void undo_premove()
{
    undo_compress();
    undo_valid = true;
}

void undo()
{
    if(undo_valid)
    {
        undo_decompress();
        shooting = false;
        num_moving_objects = 0;
        undo_valid = false;
    }
}
